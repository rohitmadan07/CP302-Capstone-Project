#include "cache.h"

void CACHE::llc_prefetcher_initialize() 
{
    cout << "LLC No Stats" << endl;
    
    count_load_hit=0; count_load_miss=0; count_store_hit=0; count_store_miss=0; count_else_hit=0; count_else_miss=0;
}

uint32_t CACHE::llc_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
  return metadata_in;
}

uint32_t CACHE::llc_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::llc_prefetcher_final_stats()
{
  cout << "LLC Next Line Prefetcher Final Stats: " << endl << endl;
  cout << "Queue level details" << endl << endl;
  cout << " RQ_Merged: " << setw(10) << RQ.MERGED << " RQ_Access: " << setw(10) << RQ.ACCESS << " RQ_FULL: " << setw(10) << RQ.FULL << " RQ_ToCache: " << setw(10) << RQ.TO_CACHE << " RQ_FORWARDED: " << setw(10) << RQ.FORWARD <<  endl;
  cout << " WQ_Merged: " << setw(10) << WQ.MERGED << " WQ_Access: " << setw(10) << WQ.ACCESS << " WQ_FULL: " << setw(10) << WQ.FULL << " WQ_ToCache: " << setw(10) << WQ.TO_CACHE << " WQ_FORWARDED: " << setw(10) << WQ.FORWARD<< endl;
  cout << " PQ_Merged: " << setw(10) << PQ.MERGED << " PQ_Access: " << setw(10) << PQ.ACCESS << " PQ_FULL: " << setw(10) << PQ.FULL << " PQ_ToCache: " << setw(10) << PQ.TO_CACHE << " PQ_FORWARDED: " << setw(10) << PQ.FORWARD<< endl;
  cout << endl << "############Universal_Stats##############" << endl;
  cout << endl;
  for(int i=0; i<NUM_TYPES;i++)
  {
    if (i == 0)
    cout << "LOAD ";
    else if (i ==1)
    cout << "RFO " ;
    else if (i == 2)
    cout << "PREFETCH ";
    else
    cout << "WRITEBACK ";
  
  cout << " Access: " << setw(10) << ACCESS[i] << " HIT: " << setw(10) << HIT[i] << " MISS: " << setw(10) << MISS[i] << " STALL: " << setw(10) << STALL[i] << " MSHR_MERGED: " << setw(10) << MSHR_MERGED[i] << endl;
  cout << endl;
  }

  cout << " load_hit: " << count_load_hit << setw(10) << " load_miss: " << count_load_miss << setw(10) << " store_hit: " << count_store_hit << setw(10) << " store_miss: " << count_store_miss << setw(10) << " count_else: " << count_else_hit << setw(10) << " count_else: " << count_else_miss << endl;
  cout << endl;
  cout << " PQ_overflow: " << PQ_over_flow << setw(10) << " PQ_boundry_check: " << outside_baundary << endl;
  cout << endl;
  cout << " counter_1: " << counter_1 << setw(10) <<  " counter_2: " << counter_2 << setw(10) << " counter_3: " << counter_3 << setw(10) << " counter_4: " << counter_4 << endl;
}
